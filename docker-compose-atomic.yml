version: '3'

services:
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redisdata:/data
    command: redis-server --appendonly yes --supervised systemd --maxmemory 10gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:14
    container_name: postgresql
    tty: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./atomic/Deployment/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - backend

  # node:
  #   container_name: node
  #   tty: true
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.node
  #     args:
  #       - ATOMIC_ENVIRONMENT=${ATOMIC_ENVIRONMENT}
  #   ports:
  #     - "9876:9876"
  #     - "8888:8888"
  #   networks:
  #     - backend
  #   volumes:
  #     - node:/app/node/data

  atomic:
    container_name: atomic
    tty: true
    build:
      context: ./atomic/Deployment
      dockerfile: Dockerfile.atomic
      args:
        - ATOMIC_ENVIRONMENT=${ATOMIC_ENVIRONMENT}
        - ATOMIC_LAUNCH_ON_STARTUP=${ATOMIC_LAUNCH_ON_STARTUP}
        - SHIP=${SHIP}
        - HTTP=${HTTP}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "9000:9000"
    networks:
      - backend
    volumes:
      - atomic:/app/atomic
    depends_on:
      # - node
      - postgres
      - redis     

networks:
  backend:

volumes:
  postgres_data:
  redisdata:
  # node:
  atomic:
