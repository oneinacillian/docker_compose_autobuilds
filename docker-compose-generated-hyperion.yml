
version: '3'
services:
  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.0
    container_name: kibana
    environment:
      - "ELASTICSEARCH_URL=http://es1:9200"
      - "ELASTICSEARCH_HOSTS=http://es1:9200"
    ports:
      - "5601:5601"
    depends_on:
      - es1
    networks:
      - esnet
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - esnet
    volumes:
      - redisdata:/data
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 6gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --tcp-keepalive 60
      --io-threads 2
      --io-threads-do-reads yes
      --activedefrag yes
      --active-defrag-threshold-lower 10
      --active-defrag-threshold-upper 100
      --active-defrag-cycle-min 25
      --active-defrag-cycle-max 75
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  hyperion:
    container_name: hyperion
    tty: true
    build:
      context: ./hyperion/Deployment
      dockerfile: Dockerfile.hyperion
      args:
        - HYPERION_ENVIRONMENT=testnet
        - HYPERION_LAUNCH_ON_STARTUP=false
        - HYPERION_VERSION=3.5.0
        - RABBITMQ_DEFAULT_USER=rabbitmquser
        - RABBITMQ_DEFAULT_PASS=rabbitmqpass
    ports:
      - "7000:7000"
      - "1234:1234"
    networks:
      - esnet
    deploy:
      resources:
        limits:
          memory: 8g
          cpus: "2"
    volumes:
      - hyperiondata:/app/hyperiondata
    depends_on:
      - redis
      - rabbitmq-1
      - es1

  node:
    container_name: node
    tty: true
    build:
      context: ./hyperion/Deployment
      dockerfile: Dockerfile.node
      args:
        - HYPERION_ENVIRONMENT=testnet
        - HYPERION_LAUNCH_ON_STARTUP=false
        - LEAP_FILE=https://apt.eossweden.org/wax/pool/stable/w/wax-leap-503wax01/wax-leap-503wax01_5.0.3wax01-ubuntu-22.04_amd64.deb
        - LEAP_DEB_FILE=wax-leap-503wax01_5.0.3wax01-ubuntu-22.04_amd64.deb
    ports:
      - "127.0.0.1:9876:9876"
      - "127.0.0.1:8888:8888"
    networks:
      - esnet
    deploy:
      resources:
        limits:
          memory: 16g
          cpus: "4"
    volumes:
      - node:/app/node/data

  rabbitmq-1:
    build:
      context: ./rabbitmq/Deployment
      dockerfile: Dockerfile.rabbitmq  
    container_name: rabbitmq-1
    hostname: rabbitmq-1
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmquser
      - RABBITMQ_DEFAULT_PASS=rabbitmqpass
      - RABBITMQ_DEFAULT_VHOST=hyperion
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_NODENAME=rabbit@rabbitmq-1
      - RABBITMQ_USE_LONGNAME=false
    command:
      - sh
      - -c
      - |
        rabbitmq-plugins disable --all &&
        rabbitmq-plugins enable rabbitmq_management rabbitmq_prometheus &&
        rabbitmq-server &
        sleep 10 &&
        wait
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
      - "127.0.0.1:15692:15692"
    networks:
      - esnet
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"
    volumes:
      - rabbitmqdata1:/var/lib/rabbitmq
      - ./rabbitmq/Deployment/rabbitmq-cluster.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/Deployment/rabbitmq-env.conf:/etc/rabbitmq/rabbitmq-env.conf   
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq-2:
    build:
      context: ./rabbitmq/Deployment
      dockerfile: Dockerfile.rabbitmq  
    container_name: rabbitmq-2
    hostname: rabbitmq-2
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmquser
      - RABBITMQ_DEFAULT_PASS=rabbitmqpass
      - RABBITMQ_DEFAULT_VHOST=hyperion
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_NODENAME=rabbit@rabbitmq-2
      - RABBITMQ_USE_LONGNAME=false
    command:
      - sh
      - -c
      - |
        rabbitmq-plugins disable --all &&
        rabbitmq-plugins enable rabbitmq_management rabbitmq_prometheus &&
        rabbitmq-server &
        sleep 10 &&
        # Join cluster with first node
        sleep 30 &&
        rabbitmqctl stop_app &&
        rabbitmqctl reset &&
        rabbitmqctl join_cluster rabbit@rabbitmq-1 &&
        rabbitmqctl start_app &&
        wait
    ports:
      - "127.0.0.1:5673:5672"
      - "127.0.0.1:15673:15672"
      - "127.0.0.1:15693:15692"
    networks:
      - esnet
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"
    volumes:
      - rabbitmqdata2:/var/lib/rabbitmq
      - ./rabbitmq/Deployment/rabbitmq-cluster.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/Deployment/rabbitmq-env.conf:/etc/rabbitmq/rabbitmq-env.conf   
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - rabbitmq-1

  rabbitmq-3:
    build:
      context: ./rabbitmq/Deployment
      dockerfile: Dockerfile.rabbitmq  
    container_name: rabbitmq-3
    hostname: rabbitmq-3
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmquser
      - RABBITMQ_DEFAULT_PASS=rabbitmqpass
      - RABBITMQ_DEFAULT_VHOST=hyperion
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_NODENAME=rabbit@rabbitmq-3
      - RABBITMQ_USE_LONGNAME=false
    command:
      - sh
      - -c
      - |
        rabbitmq-plugins disable --all &&
        rabbitmq-plugins enable rabbitmq_management rabbitmq_prometheus &&
        rabbitmq-server &
        sleep 10 &&
        # Join cluster with first node
        sleep 30 &&
        rabbitmqctl stop_app &&
        rabbitmqctl reset &&
        rabbitmqctl join_cluster rabbit@rabbitmq-1 &&
        rabbitmqctl start_app &&
        wait
    ports:
      - "127.0.0.1:5674:5672"
      - "127.0.0.1:15674:15672"
      - "127.0.0.1:15694:15692"
    networks:
      - esnet
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"
    volumes:
      - rabbitmqdata3:/var/lib/rabbitmq
      - ./rabbitmq/Deployment/rabbitmq-cluster.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/Deployment/rabbitmq-env.conf:/etc/rabbitmq/rabbitmq-env.conf   
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - rabbitmq-1

  rabbitmq-loadbalancer:
    image: haproxy:2.8-alpine
    container_name: rabbitmq-loadbalancer
    ports:
      - "0.0.0.0:5675:5672"
      - "0.0.0.0:15675:15672"
      - "0.0.0.0:15695:15692"
    volumes:
      - ./rabbitmq/Deployment/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - esnet
    depends_on:
      - rabbitmq-1
      - rabbitmq-2
      - rabbitmq-3
    healthcheck:
      test: ["CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
      interval: 30s
      timeout: 10s
      retries: 3

  es1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: es1
    environment:
      - "node.name=es1"
      - "cluster.name=es-docker-cluster"
      - "cluster.initial_master_nodes=es1"
      - "discovery.seed_hosts=es1"
      - "network.host=0.0.0.0"
      - "network.publish_host=es1"
      - "transport.host=0.0.0.0"
      - "node.roles=[master, data, ingest, remote_cluster_client]"
      - "ES_JAVA_OPTS=-Xms15g -Xmx15g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/elasticsearch"
      - "ES_HEAP_DUMP_PATH=/var/log/elasticsearch"
      - "ES_GC_LOG_PATH=/var/log/elasticsearch"
      - "bootstrap.memory_lock=true"
      - "xpack.security.enabled=false"
      - "xpack.monitoring.collection.enabled=true"
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - esdata1:/usr/share/elasticsearch/data
      - ./elasticsearch/config/es1/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - esnet
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq \"status\":\"red\""]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s

volumes:
  grafana-data:
  redisdata:

  rabbitmqdata1:
  rabbitmqdata2:
  rabbitmqdata3:
  hyperiondata:
  node:
  certbot-etc:
  certbot-var:
  certbot-www:
  esdata1:

networks:
  esnet:
