apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
        - name: config-reader
          image: bitnami/kubectl:latest
          command: ["/bin/bash"]
          args:
            - -c
            - |
              # Wait for the dynamic-config ConfigMap to be available
              echo "Waiting for dynamic-config ConfigMap..."
              while ! kubectl get configmap postgresql-dynamic-config -n postgres >/dev/null 2>&1; do
                echo "ConfigMap not ready, waiting..."
                sleep 2
              done
              
              echo "Dynamic config ConfigMap found, reading values..."
              
              # Read values from the dynamic-config ConfigMap
              SHARED_BUFFERS_PERCENTAGE=$(kubectl get configmap postgresql-dynamic-config -n postgres -o jsonpath='{.data.shared_buffers_percentage}')
              MAINTENANCE_WORK_MEM_PERCENTAGE=$(kubectl get configmap postgresql-dynamic-config -n postgres -o jsonpath='{.data.maintenance_work_mem_percentage}')
              EFFECTIVE_CACHE_SIZE_PERCENTAGE=$(kubectl get configmap postgresql-dynamic-config -n postgres -o jsonpath='{.data.effective_cache_size_percentage}')
              WORK_MEM_MULTIPLIER=$(kubectl get configmap postgresql-dynamic-config -n postgres -o jsonpath='{.data.work_mem_multiplier}')
              MAX_CONNECTIONS=$(kubectl get configmap postgresql-dynamic-config -n postgres -o jsonpath='{.data.max_connections}')
              ENABLE_PG_TRGM=$(kubectl get configmap postgresql-dynamic-config -n postgres -o jsonpath='{.data.enable_pg_trgm}')
              
              # Set default values if not found
              SHARED_BUFFERS_PERCENTAGE="${SHARED_BUFFERS_PERCENTAGE:-25}"
              MAINTENANCE_WORK_MEM_PERCENTAGE="${MAINTENANCE_WORK_MEM_PERCENTAGE:-5}"
              EFFECTIVE_CACHE_SIZE_PERCENTAGE="${EFFECTIVE_CACHE_SIZE_PERCENTAGE:-50}"
              WORK_MEM_MULTIPLIER="${WORK_MEM_MULTIPLIER:-256}"
              MAX_CONNECTIONS="${MAX_CONNECTIONS:-100}"
              ENABLE_PG_TRGM="${ENABLE_PG_TRGM:-true}"
              
              echo "Configuration values:"
              echo "  SHARED_BUFFERS_PERCENTAGE: ${SHARED_BUFFERS_PERCENTAGE}"
              echo "  MAINTENANCE_WORK_MEM_PERCENTAGE: ${MAINTENANCE_WORK_MEM_PERCENTAGE}"
              echo "  EFFECTIVE_CACHE_SIZE_PERCENTAGE: ${EFFECTIVE_CACHE_SIZE_PERCENTAGE}"
              echo "  WORK_MEM_MULTIPLIER: ${WORK_MEM_MULTIPLIER}"
              echo "  MAX_CONNECTIONS: ${MAX_CONNECTIONS}"
              echo "  ENABLE_PG_TRGM: ${ENABLE_PG_TRGM}"
              
              # Create a file with environment variables for the main container
              cat > /tmp/postgres-env.sh << EOF
              export SHARED_BUFFERS_PERCENTAGE="${SHARED_BUFFERS_PERCENTAGE}"
              export MAINTENANCE_WORK_MEM_PERCENTAGE="${MAINTENANCE_WORK_MEM_PERCENTAGE}"
              export EFFECTIVE_CACHE_SIZE_PERCENTAGE="${EFFECTIVE_CACHE_SIZE_PERCENTAGE}"
              export WORK_MEM_MULTIPLIER="${WORK_MEM_MULTIPLIER}"
              export MAX_CONNECTIONS="${MAX_CONNECTIONS}"
              export ENABLE_PG_TRGM="${ENABLE_PG_TRGM}"
              EOF
              
              echo "Environment variables written to /tmp/postgres-env.sh"
              echo "Init container completed successfully!"
          volumeMounts:
            - name: postgres-env
              mountPath: /tmp
          env:
            - name: KUBECONFIG
              value: "/.kube/config"
          serviceAccountName: postgres-config-reader
      containers:
        - name: postgres
          image: postgres:14
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "waxuser"
            - name: POSTGRES_PASSWORD
              value: "waxuserpass"
            - name: POSTGRES_DB
              value: "atomic"
            - name: POSTGRES_INITDB_ARGS
              value: "--data-checksums"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            # Dynamic configuration environment variables (set by init container)
            - name: SHARED_BUFFERS_PERCENTAGE
              value: "25"
            - name: MAINTENANCE_WORK_MEM_PERCENTAGE
              value: "5"
            - name: EFFECTIVE_CACHE_SIZE_PERCENTAGE
              value: "50"
            - name: WORK_MEM_MULTIPLIER
              value: "256"
            - name: MAX_CONNECTIONS
              value: "100"
            - name: ENABLE_PG_TRGM
              value: "true"
          resources:
            limits:
              memory: "2Gi"
              cpu: "1"
            requests:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - waxuser
                - -d
                - atomic
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - waxuser
                - -d
                - atomic
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgresql-pg-hba
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
            - name: postgres-env
              mountPath: /tmp
          command:
            - "postgres"
            - "-c"
            - "config_file=/etc/postgresql/postgresql.conf"
            - "-c"
            - "hba_file=/etc/postgresql/pg_hba.conf"
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: postgresql-config
          configMap:
            name: postgresql-config
        - name: postgresql-pg-hba
          configMap:
            name: postgresql-pg-hba
        - name: init-script
          configMap:
            name: postgres-init-script
        - name: postgres-env
          emptyDir: {}
